<?php
/**
 * TokenResult
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\Helios\Auth
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * iNuvio Server Auth API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.33
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\Helios\Auth\Model;

use \ArrayAccess;
use \BeLenka\Helios\Auth\ObjectSerializer;

/**
 * TokenResult Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\Helios\Auth
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TokenResult implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'tokenResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'version_dispatcher' => 'string',
        'version_runtime' => 'string',
        'version_sql' => 'string',
        'license' => 'string',
        'sql_server' => 'string',
        'id_code' => 'string',
        'license_system_api' => 'bool',
        'license_eshop_api' => 'bool',
        'license_received_invoices_api' => 'bool',
        'license_issued_invoices_api' => 'bool',
        'token' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'version_dispatcher' => null,
        'version_runtime' => null,
        'version_sql' => null,
        'license' => null,
        'sql_server' => null,
        'id_code' => null,
        'license_system_api' => null,
        'license_eshop_api' => null,
        'license_received_invoices_api' => null,
        'license_issued_invoices_api' => null,
        'token' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'version_dispatcher' => false,
		'version_runtime' => false,
		'version_sql' => false,
		'license' => false,
		'sql_server' => false,
		'id_code' => false,
		'license_system_api' => false,
		'license_eshop_api' => false,
		'license_received_invoices_api' => false,
		'license_issued_invoices_api' => false,
		'token' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'version_dispatcher' => 'versionDispatcher',
        'version_runtime' => 'versionRuntime',
        'version_sql' => 'versionSql',
        'license' => 'license',
        'sql_server' => 'sqlServer',
        'id_code' => 'idCode',
        'license_system_api' => 'licenseSystemAPI',
        'license_eshop_api' => 'licenseEshopAPI',
        'license_received_invoices_api' => 'licenseReceivedInvoicesAPI',
        'license_issued_invoices_api' => 'licenseIssuedInvoicesAPI',
        'token' => 'token'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'version_dispatcher' => 'setVersionDispatcher',
        'version_runtime' => 'setVersionRuntime',
        'version_sql' => 'setVersionSql',
        'license' => 'setLicense',
        'sql_server' => 'setSqlServer',
        'id_code' => 'setIdCode',
        'license_system_api' => 'setLicenseSystemApi',
        'license_eshop_api' => 'setLicenseEshopApi',
        'license_received_invoices_api' => 'setLicenseReceivedInvoicesApi',
        'license_issued_invoices_api' => 'setLicenseIssuedInvoicesApi',
        'token' => 'setToken'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'version_dispatcher' => 'getVersionDispatcher',
        'version_runtime' => 'getVersionRuntime',
        'version_sql' => 'getVersionSql',
        'license' => 'getLicense',
        'sql_server' => 'getSqlServer',
        'id_code' => 'getIdCode',
        'license_system_api' => 'getLicenseSystemApi',
        'license_eshop_api' => 'getLicenseEshopApi',
        'license_received_invoices_api' => 'getLicenseReceivedInvoicesApi',
        'license_issued_invoices_api' => 'getLicenseIssuedInvoicesApi',
        'token' => 'getToken'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('version_dispatcher', $data ?? [], null);
        $this->setIfExists('version_runtime', $data ?? [], null);
        $this->setIfExists('version_sql', $data ?? [], null);
        $this->setIfExists('license', $data ?? [], null);
        $this->setIfExists('sql_server', $data ?? [], null);
        $this->setIfExists('id_code', $data ?? [], null);
        $this->setIfExists('license_system_api', $data ?? [], null);
        $this->setIfExists('license_eshop_api', $data ?? [], null);
        $this->setIfExists('license_received_invoices_api', $data ?? [], null);
        $this->setIfExists('license_issued_invoices_api', $data ?? [], null);
        $this->setIfExists('token', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['version_dispatcher'] === null) {
            $invalidProperties[] = "'version_dispatcher' can't be null";
        }
        if ($this->container['version_runtime'] === null) {
            $invalidProperties[] = "'version_runtime' can't be null";
        }
        if ($this->container['version_sql'] === null) {
            $invalidProperties[] = "'version_sql' can't be null";
        }
        if ($this->container['license'] === null) {
            $invalidProperties[] = "'license' can't be null";
        }
        if ($this->container['sql_server'] === null) {
            $invalidProperties[] = "'sql_server' can't be null";
        }
        if ($this->container['id_code'] === null) {
            $invalidProperties[] = "'id_code' can't be null";
        }
        if ($this->container['license_system_api'] === null) {
            $invalidProperties[] = "'license_system_api' can't be null";
        }
        if ($this->container['license_eshop_api'] === null) {
            $invalidProperties[] = "'license_eshop_api' can't be null";
        }
        if ($this->container['license_received_invoices_api'] === null) {
            $invalidProperties[] = "'license_received_invoices_api' can't be null";
        }
        if ($this->container['license_issued_invoices_api'] === null) {
            $invalidProperties[] = "'license_issued_invoices_api' can't be null";
        }
        if ($this->container['token'] === null) {
            $invalidProperties[] = "'token' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets version_dispatcher
     *
     * @return string
     */
    public function getVersionDispatcher()
    {
        return $this->container['version_dispatcher'];
    }

    /**
     * Sets version_dispatcher
     *
     * @param string $version_dispatcher Verze Dispatcher.
     *
     * @return self
     */
    public function setVersionDispatcher($version_dispatcher)
    {
        if (is_null($version_dispatcher)) {
            throw new \InvalidArgumentException('non-nullable version_dispatcher cannot be null');
        }
        $this->container['version_dispatcher'] = $version_dispatcher;

        return $this;
    }

    /**
     * Gets version_runtime
     *
     * @return string
     */
    public function getVersionRuntime()
    {
        return $this->container['version_runtime'];
    }

    /**
     * Sets version_runtime
     *
     * @param string $version_runtime Verze Runtime.
     *
     * @return self
     */
    public function setVersionRuntime($version_runtime)
    {
        if (is_null($version_runtime)) {
            throw new \InvalidArgumentException('non-nullable version_runtime cannot be null');
        }
        $this->container['version_runtime'] = $version_runtime;

        return $this;
    }

    /**
     * Gets version_sql
     *
     * @return string
     */
    public function getVersionSql()
    {
        return $this->container['version_sql'];
    }

    /**
     * Sets version_sql
     *
     * @param string $version_sql Verze MS SQL Server.
     *
     * @return self
     */
    public function setVersionSql($version_sql)
    {
        if (is_null($version_sql)) {
            throw new \InvalidArgumentException('non-nullable version_sql cannot be null');
        }
        $this->container['version_sql'] = $version_sql;

        return $this;
    }

    /**
     * Gets license
     *
     * @return string
     */
    public function getLicense()
    {
        return $this->container['license'];
    }

    /**
     * Sets license
     *
     * @param string $license Číslo licence.
     *
     * @return self
     */
    public function setLicense($license)
    {
        if (is_null($license)) {
            throw new \InvalidArgumentException('non-nullable license cannot be null');
        }
        $this->container['license'] = $license;

        return $this;
    }

    /**
     * Gets sql_server
     *
     * @return string
     */
    public function getSqlServer()
    {
        return $this->container['sql_server'];
    }

    /**
     * Sets sql_server
     *
     * @param string $sql_server Použitý SQL Server.
     *
     * @return self
     */
    public function setSqlServer($sql_server)
    {
        if (is_null($sql_server)) {
            throw new \InvalidArgumentException('non-nullable sql_server cannot be null');
        }
        $this->container['sql_server'] = $sql_server;

        return $this;
    }

    /**
     * Gets id_code
     *
     * @return string
     */
    public function getIdCode()
    {
        return $this->container['id_code'];
    }

    /**
     * Sets id_code
     *
     * @param string $id_code Identifikační kód.
     *
     * @return self
     */
    public function setIdCode($id_code)
    {
        if (is_null($id_code)) {
            throw new \InvalidArgumentException('non-nullable id_code cannot be null');
        }
        $this->container['id_code'] = $id_code;

        return $this;
    }

    /**
     * Gets license_system_api
     *
     * @return bool
     */
    public function getLicenseSystemApi()
    {
        return $this->container['license_system_api'];
    }

    /**
     * Sets license_system_api
     *
     * @param bool $license_system_api Licence pro System API.
     *
     * @return self
     */
    public function setLicenseSystemApi($license_system_api)
    {
        if (is_null($license_system_api)) {
            throw new \InvalidArgumentException('non-nullable license_system_api cannot be null');
        }
        $this->container['license_system_api'] = $license_system_api;

        return $this;
    }

    /**
     * Gets license_eshop_api
     *
     * @return bool
     */
    public function getLicenseEshopApi()
    {
        return $this->container['license_eshop_api'];
    }

    /**
     * Sets license_eshop_api
     *
     * @param bool $license_eshop_api Licence pro eShop API.
     *
     * @return self
     */
    public function setLicenseEshopApi($license_eshop_api)
    {
        if (is_null($license_eshop_api)) {
            throw new \InvalidArgumentException('non-nullable license_eshop_api cannot be null');
        }
        $this->container['license_eshop_api'] = $license_eshop_api;

        return $this;
    }

    /**
     * Gets license_received_invoices_api
     *
     * @return bool
     */
    public function getLicenseReceivedInvoicesApi()
    {
        return $this->container['license_received_invoices_api'];
    }

    /**
     * Sets license_received_invoices_api
     *
     * @param bool $license_received_invoices_api Licence pro receivedInvoices API.
     *
     * @return self
     */
    public function setLicenseReceivedInvoicesApi($license_received_invoices_api)
    {
        if (is_null($license_received_invoices_api)) {
            throw new \InvalidArgumentException('non-nullable license_received_invoices_api cannot be null');
        }
        $this->container['license_received_invoices_api'] = $license_received_invoices_api;

        return $this;
    }

    /**
     * Gets license_issued_invoices_api
     *
     * @return bool
     */
    public function getLicenseIssuedInvoicesApi()
    {
        return $this->container['license_issued_invoices_api'];
    }

    /**
     * Sets license_issued_invoices_api
     *
     * @param bool $license_issued_invoices_api Licence pro issuedInvoices API.
     *
     * @return self
     */
    public function setLicenseIssuedInvoicesApi($license_issued_invoices_api)
    {
        if (is_null($license_issued_invoices_api)) {
            throw new \InvalidArgumentException('non-nullable license_issued_invoices_api cannot be null');
        }
        $this->container['license_issued_invoices_api'] = $license_issued_invoices_api;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string $token JWT pro ověřování požadavků.
     *
     * @return self
     */
    public function setToken($token)
    {
        if (is_null($token)) {
            throw new \InvalidArgumentException('non-nullable token cannot be null');
        }
        $this->container['token'] = $token;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


